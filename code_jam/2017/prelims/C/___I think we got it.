def binary(n):
  #n -= 1
  
  moves = []
  while n > 1:
    if n % 2 == 0:
      moves.append(True) # right
    else:
      moves.append(False) # left
    n //= 2
  return moves
  

def answer(n, k):
  for is_right in binary(k):
    n -= 1
    if is_right:
      n = n // 2 + n % 2
    else:
      n = n // 2

  n -= 1
  return n // 2 + n % 2, n // 2

tests = [
  ((4, 2), (1, 0)),
  ((5, 2), (1, 0)),
  ((6, 2), (1, 1)),
  ((1000, 1), (500, 499)),
  #((), ()),
  ]

for t in tests:
  n, k = t[0][0], t[0][1]
  mx, mn = answer(n, k)
  if mx != t[1][0] or mn != t[1][1]:
    print((mx, mn), "is not equal to", t[1], "for test case", t[0])
    

############################
def brute(n, k):
    stalls = ['0'] + (['.'] * n) + ['0']

    best = (0, 0, 1)

    for _ in range(k):
        best = (-1, -1, -1)
        empty = 0
        for i in range(1, n + 2):
            if stalls[i] == '.':
                empty += 1
            else:
                empty -= 1
                ls = empty // 2
                rs = ls + empty % 2
                
                mn = min(ls, rs)
                mx = max(ls, rs)
                
                if mn > best[0] or mn == best[0] and mx > best[1]:
                    best = (mn, mx, i - rs - 1)
                empty = 0
        stalls[best[2]] = '0'
    return best[1], best[0]



# test stuff
N = 100;
for i in range(1, N):
  for j in range(1, i + 1):
    n, k = i, j
    solveR, solveL = answer(n, k)
    bruteR, bruteL = brute(n, k)
    
    if solveR != bruteR or solveL != bruteL:
      print((solveR, solveL), "is not equal to ", (bruteR, bruteL), "for test case", i, j)


import random


for _ in range(100):
  n = random.randint(1, N)
  k = random.randint(1, n)
  solveR, solveL = answer(n, k)
  print((n, k), "stuff", (solveR, solveL))
  
  
  
  
  
  
  
  
